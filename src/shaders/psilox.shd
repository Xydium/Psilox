VERTEX:
#version 400 core

in vec3 v_position;
in vec2 v_tcoord;

out vec2 f_tcoord;
out vec2 f_dimensions;

uniform mat4 u_projection;
uniform mat4 u_transform;
uniform vec2 u_dimensions;
uniform vec2 u_tex_dimensions;
uniform vec2 u_tex_botleft;
uniform vec2 u_tex_topright;
uniform vec2 u_anchor;

float constrained(float v, float min, float max) {
	return (max - min) * v + min;
}

void main(void) {
	gl_Position = u_projection * u_transform * (vec4(v_position, 1) - vec4(u_anchor, 0, 0));
	f_tcoord.x = constrained(v_tcoord.x, u_tex_botleft.x / u_tex_dimensions.x, u_tex_topright.x / u_tex_dimensions.x);
	f_tcoord.y = constrained(v_tcoord.y, u_tex_botleft.y / u_tex_dimensions.y, u_tex_topright.y / u_tex_dimensions.y);
	//f_tcoord = v_tcoord;
	f_dimensions = u_dimensions;
}

FRAGMENT:
#version 400 core

in vec2 f_tcoord;
in vec2 f_dimensions;

out vec4 f_fragcolor;

uniform sampler2D u_texture;
uniform vec4 u_modulate;

void main(void) {
	f_fragcolor = texture(u_texture, f_tcoord) * u_modulate;
}